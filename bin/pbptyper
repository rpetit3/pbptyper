#!/usr/bin/env python3
import sys
from pathlib import Path
from executor import ExternalCommand, ExternalCommandFailed
from rich import print
from rich.console import Console
from rich.table import Table
import rich_click as click

VERSION = '1.0.3'
DB_PATH = str(Path( __file__ ).parent.absolute()).replace("bin", "db")
DB_FASTAS = {
    "1A": "SPN_bLactam_1A-DB.faa",
    "2B": "SPN_bLactam_2B-DB.faa",
    "2X": "SPN_bLactam_2X-DB.faa"
}
REFERENCE = "GCF_000006885"
TBLASTN_COLS = [
    "qseqid", "sseqid", "pident", "qcovs", "qlen", "slen", "length", "nident", "mismatch",
    "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore", "qseq", "sseq"
]


def check_dependencies():
    """
    Check if all dependencies are installed.
    """
    from shutil import which
    exit_code = 0
    print(f'Checking dependencies...', file=sys.stderr)
    for program in ['fastANI', 'tblastn']:
        which_path = which(program)
        if which_path:
            print(f'Found {program} at {which_path}', file=sys.stderr)
        else:
            print(f'{program} not found', file=sys.stderr)
            exit_code = 1
    
    if exit_code == 1:
        print(f'Missing dependencies, please check.', file=sys.stderr)
    else:
        print(f'You are all set!', file=sys.stderr)
    sys.exit(exit_code)


def check_file_exists(filename: str) -> str:
    """
    Check if file exists and return the absolute path of file, otherwise raise an error.

    Args:
        `filename`: Name of file to check.

    Returns:
        Absolute path of file.
    """
    if not Path(filename).exists():
        raise click.BadParameter(f'{filename} does not exist')
    return str(Path(filename).absolute())


def run_fastani(query: str, reference: str, outfile: dir) -> float:
    """
    Run FastANI and save the output to a file.

    Args:
        `query`: Path to query file.
        `reference`: Path to database file.
        `outfile`: Path to output file.
    """
    try:
        command = ExternalCommand(
            f"fastANI -q {query} -r {reference} -o {outfile}",
            capture=True, 
            capture_stderr=True
        )
        command.start()

        ani = 0
        with open(outfile, 'r') as f:
            line = f.readline()
            if line:
                # test/SRR2912551.fna.gz  GCF_000006885.fna.gz    98.5904 229     246
                # capture the ANI or 3rd column
                ani = float(line.split('\t')[2])

        if ani == 0:
            with open(outfile, 'w') as f:
                f.write("fastANI does not report ANIs <80%\n")
        return ani
    except ExternalCommandFailed as e:
        print(e, file=sys.stderr)
        sys.exit(e.returncode)


def run_tblastn(query: str, db: str, min_pident: float, min_coverage: int) -> dict:
    """
    Run BLASTN and save the output to a file.

    Args:
        `query`: Path to query file.
        `db`: Path to database file.
        `min_pident`: Minimum percent identity.
        `min_coverage`: Minimum coverage.

    Returns:
        Dictionary of BLASTN output.
    """
    from executor import ExternalCommand, ExternalCommandFailed

    outfmt = ' '.join(TBLASTN_COLS)
    cat_type = 'zcat' if db.endswith('.gz') else 'cat'
    try:
        # Sort results by query coverage, percent identity, then bitscore
        command = ExternalCommand(
            f"{cat_type} {db} | tblastn -query {query} -subject - -qcov_hsp_perc {min_coverage} -outfmt '6 {outfmt}' | sort -rn -k 4,4 -k 3,3 -k 16,16",
            capture=True, 
            capture_stderr=True
        )
        command.start()

        # Convert results to list of dictionaries
        top_hit = {'pbp_id': 'NONE', 'qcovs': "0", 'pident': "0.0", 'bitscore': "0"}
        secondary_hits = []
        raw_results = []
        for line in str(command.decoded_stdout).split("\n"):
            if line:
                raw_results.append(line)
                result = dict(zip(TBLASTN_COLS, line.split('\t')))
                if float(result['pident']) >= min_pident:
                    if top_hit['pbp_id'] == 'NONE':
                        top_hit = result
                        if float(result['pident']) == 100.0 and int(result['length']) == int(result['qlen']):
                            top_hit['pbp_id'] = result['qseqid'].split("|")[0]
                        else:
                            top_hit['pbp_id'] = 'NEW'
                    else:
                        if float(result['pident']) == 100.0 and int(result['length']) == int(result['qlen']):
                            result['pbp_id'] = result['qseqid'].split("|")[0]
                            secondary_hits.append(result)
                else:
                    if top_hit['pbp_id'] == 'NONE':
                        top_hit = result
                        top_hit['pbp_id'] = 'NA'
        if top_hit['pbp_id'] == 'NONE':
            top_hit['pbp_id'] = 'NA'
        return [top_hit, secondary_hits, raw_results, command.decoded_stderr]
    except ExternalCommandFailed as e:
        print(e, file=sys.stderr)
        sys.exit(e.returncode)


@click.command()
@click.version_option(VERSION)
@click.option('--assembly', required=True, help='Input assembly in FASTA format (gzip is OK)')
@click.option('--db', default=DB_PATH, show_default=True, help='Path to the input database')
@click.option('--prefix', default="basename of input", show_default=True, help='Prefix to use for output files')
@click.option('--outdir', default="./", show_default=True, help='Directory to save output files')
@click.option('--min_pident', default=95, show_default=True, help='Minimum percent identity to count a hit')
@click.option('--min_coverage', default=95, show_default=True, help='Minimum percent coverage to count a hit')
@click.option('--min_ani', default=90, show_default=True, help='Minimum S. pneumoniae ANI to predict PBP Type')
@click.option('--check', is_flag=True, help='Check dependencies are installed, then exit')
@click.option('--quiet', is_flag=True, help='Suppress all output')
def pbptyper(assembly, db, prefix, outdir, min_pident, min_coverage, min_ani, check, quiet):
    """In silico Penicillin Binding Protein (PBP) typer for Streptococcus pneumoniae assemblies"""
    if check:
        check_dependencies()
        sys.exit(0)
    if outdir != "./":
        Path(outdir).mkdir(parents=True, exist_ok=True)
    assembly = check_file_exists(assembly)
    prefix = str(Path(assembly).stem) if prefix == "basename of input" else prefix

    console = Console()
    results = {}
    comment = []
    for k,v in DB_FASTAS.items():
        if not quiet:
            print(f"[italic]Running TBLASTN for {k}...[/italic]")
        query = check_file_exists(f"{db}/{v}")
        top_hit, secondary_hits, tblastn_stdout, tblastn_stderr = run_tblastn(query, assembly, min_pident, min_coverage)
        results[k] = top_hit

        # Check if multiple perfect matches were found
        if len(secondary_hits) > 0:
            perfect_matches = [top_hit['pbp_id']]
            for hit in secondary_hits:
                perfect_matches.append(hit['pbp_id'])
            perfect_matches = ', '.join(perfect_matches)
            comment.append(f"Unable to determine an ID for {k}, due to perfect matches to multiple alleles. Including: {perfect_matches}")
            results[k]['pbp_id'] = 'MULTIPLE'

        # Write tblastn hits
        outfile = f"{outdir}/{prefix}-{k}".replace("//", "/")

        if not quiet:
            print(f"[italic]TBLASTN results written to [deep_sky_blue1]{outfile}.tblastn.tsv[/deep_sky_blue1][/italic]\n")
        with open(f"{outfile}.tblastn.tsv", 'wt') as fh_out:
            fh_out.write("\t".join(TBLASTN_COLS) + "\n")
            for result in tblastn_stdout:
                fh_out.write(f"{result}\n")

    # Run fastANI
    fastani_outfile = f"{outdir}/{prefix}.fastani.tsv".replace("//", "/")
    if not quiet:
        print(f"[italic]Running fastANI...[/italic]")
    ani = run_fastani(assembly, check_file_exists(f"{db}/{REFERENCE}.fna.gz"), fastani_outfile)
    ani_string = "< 80" if ani == 0 else f"{ani:.2f}"
    if not quiet:
        print(f"[italic]S. pneumoniae ({REFERENCE}) ANI is {ani_string}%, results written to [deep_sky_blue1]{fastani_outfile}[/deep_sky_blue1][/italic]\n")

    # Predicted PBP Type
    outfile = f"{outdir}/{prefix}".replace("//", "/")
    prediction_table = Table(title=f"Predicted PBP Type")
    prediction_table.add_column("sample", style="white")
    prediction_table.add_column("pbptype", style="cyan")
    prediction_table.add_column("ani", style="green")
    prediction_table.add_column("1A_coverage", style="green")
    prediction_table.add_column("1A_pident", style="green")
    prediction_table.add_column("1A_bitscore", style="green")
    prediction_table.add_column("2B_coverage", style="green")
    prediction_table.add_column("2B_pident", style="green")
    prediction_table.add_column("2B_bitscore", style="green")
    prediction_table.add_column("2X_coverage", style="green")
    prediction_table.add_column("2X_pident", style="green")
    prediction_table.add_column("2X_bitscore", style="green")
    prediction_table.add_column("comment", style="green")
    with open(f"{outfile}.tsv", 'wt') as fh_out:
        if ani >= min_ani:
            pbptype = f"{results['1A']['pbp_id']}:{results['2B']['pbp_id']}:{results['2X']['pbp_id']}"
        else:
            pbptype = f"NOTSPN:NOTSPN:NOTSPN"
            comment.append(f"ANI to [italic]S. pneumoniae[/italic] ({REFERENCE}) is {ani_string}%, which is below the minimum {min_ani}% ANI required to predict PBP Type")
        
        comment = '; '.join(comment)
        prediction_table.add_row(
            prefix,
            pbptype,
            ani_string,
            results['1A']['qcovs'],
            results['1A']['pident'],
            results['1A']['bitscore'],
            results['2B']['qcovs'],
            results['2B']['pident'],
            results['2B']['bitscore'],
            results['2X']['qcovs'],
            results['2X']['pident'],
            results['2X']['bitscore'],
            comment
        )
        column_names = "\t".join([
            "sample",
            "pbptype",
            "ani",
            "1A_coverage",
            "1A_pident",
            "1A_bitscore",
            "2B_coverage",
            "2B_pident",
            "2B_bitscore",
            "2X_coverage",
            "2X_pident",
            "2X_bitscore",
            "comment"
        ])
        fh_out.write(f"{column_names}\n")
        column_vals = "\t".join([
            prefix,
            pbptype,
            ani_string,
            results['1A']['qcovs'],
            results['1A']['pident'],
            results['1A']['bitscore'],
            results['2B']['qcovs'],
            results['2B']['pident'],
            results['2B']['bitscore'],
            results['2X']['qcovs'],
            results['2X']['pident'],
            results['2X']['bitscore'],
            comment
        ])
        fh_out.write(f"{column_vals}\n")
    
    if not quiet:
        console.print(prediction_table)  
        print(f"[italic]Predicted pbp type result written to [deep_sky_blue1]{outfile}.tsv[/deep_sky_blue1][/italic]\n")

if __name__ == '__main__':
    pbptyper()
